<!DOCTYPE html>
<html lang="en">

<head>
  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-49925874-3"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-49925874-3');
  </script>

  <meta charset='utf-8'>
  <meta content='IE=edge,chrome=1' http-equiv='X-UA-Compatible'>

  <title>Git - Maintenance and Data Recovery</title>

  <link href='/favicon.ico' rel='shortcut icon' type='image/x-icon'>

  <link rel="stylesheet" media="screen" href="/assets/application-5d2c8cbd740f023e85e568ce5b6004dfc124d998f32bbd82cc445d84763db9fa.css" />
  <script src="/assets/modernize-91eb7473bfa18e104376c623be884766692c7cf93c8769aea544ad57e3ea2292.js"></script>
  <!--[if (gte IE 6)&(lte IE 8)]>
  <script src="/javascripts/selectivizr-min.js"></script>
  <![endif]-->

</head>

<body id="documentation">

  <div class="inner">
    <header>

  <a href="/"><img src="/images/logo@2x.png" width="110" height="46" alt="Git" /></a>
  <span id="tagline"></span>
  <script type="text/javascript">
    var taglines = ["fast-version-control","everything-is-local","distributed-even-if-your-workflow-isnt","local-branching-on-the-cheap","distributed-is-the-new-centralized"];
    var tagline = taglines[Math.floor(Math.random() * taglines.length)];
    document.getElementById('tagline').innerHTML = '--' + tagline;
  </script>
  <form id="search" action="/search/results">
    <input id="search-text" name="search" placeholder="Search entire site..." autocomplete="off" type="text" />
  </form>
  <div id="search-results"></div>

</header>

  </div> <!-- .inner -->

    <div class="inner">
      <div id="content-wrapper">
        <aside class="sidebar">
  <nav>
    <ul>
      <li>
        <a href="/about">About</a>
        <ul class="">
          <li>
            <a href="/about">Branching and Merging</a>
          </li>
          <li>
            <a href="/about/small-and-fast">Small and Fast</a>
          </li>
          <li>
            <a href="/about/distributed">Distributed</a>
          </li>
          <li>
            <a href="/about/info-assurance">Data Assurance</a>
          </li>
          <li>
            <a href="/about/staging-area">Staging Area</a>
          </li>
          <li>
            <a href="/about/free-and-open-source">Free and Open Source</a>
          </li>
          <li>
            <a href="/about/trademark">Trademark</a>
          </li>
        </ul>
      </li>
      <li>
        <a class="active" href="/doc">Documentation</a>
        <ul class="expanded">
          <li>
            <a href="/docs">Reference</a>
          </li>
          <li>
            <a class="active" href="/book">Book</a>
          </li>
          <li>
            <a href="/videos">Videos</a>
          </li>
          <li>
            <a href="/doc/ext">External Links</a>
          </li>
        </ul>
      </li>
      <li>
        <a href="/downloads">Downloads</a>
        <ul class="">
          <li>
            <a href="/downloads/guis">GUI Clients</a>
          </li>
          <li>
            <a href="/downloads/logos">Logos</a>
          </li>
        </ul>
      </li>
      <li>
        <a href="/community">Community</a>
      </li>
    </ul>
      <hr class="sidebar">
        <p>
This book is available in
  <a href="/book/en">English</a>.
</p>
<p>
  Full translation available in
  <table>
    <tr><td><a href="/book/bg">български език</a>,</td></tr>
    <tr><td><a href="/book/de">Deutsch</a>,</td></tr>
    <tr><td><a href="/book/es">Español</a>,</td></tr>
    <tr><td><a href="/book/fr">Français</a>,</td></tr>
    <tr><td><a href="/book/gr">Ελληνικά</a>,</td></tr>
    <tr><td><a href="/book/ja">日本語</a>,</td></tr>
    <tr><td><a href="/book/ko">한국어</a>,</td></tr>
    <tr><td><a href="/book/nl">Nederlands</a>,</td></tr>
    <tr><td><a href="/book/ru">Русский</a>,</td></tr>
    <tr><td><a href="/book/sl">Slovenščina</a>,</td></tr>
    <tr><td><a href="/book/tl">Tagalog</a>,</td></tr>
    <tr><td><a href="/book/uk">Українська</a></td></tr>
    <tr><td><a href="/book/zh">简体中文</a>,</td></tr>
  </table>
</p>
<p>
  Partial translations available in
  <table>
    <tr><td><a href="/book/cs">Čeština</a>,</td></tr>
    <tr><td><a href="/book/mk">Македонски</a>,</td></tr>
    <tr><td><a href="/book/pl">Polski</a>,</td></tr>
    <tr><td><a href="/book/sr">Српски</a>,</td></tr>
    <tr><td><a href="/book/uz">Ўзбекча</a>,</td></tr>
    <tr><td><a href="/book/zh-tw">繁體中文</a>,</td></tr>
  </table>
</p>
<p>
  Translations started for
  <table>
    <tr><td><a href="/book/az">azərbaycan dili</a>,</td></tr>
    <tr><td><a href="/book/be">Беларуская</a>,</td></tr>
    <tr><td><a href="/book/fa" dir="rtl">فارسی</a>,</td></tr>
    <tr><td><a href="/book/id">Indonesian</a>,</td></tr>
    <tr><td><a href="/book/it">Italiano</a>,</td></tr>
    <tr><td><a href="/book/ms">Bahasa Melayu</a>,</td></tr>
    <tr><td><a href="/book/pt-br">Português (Brasil)</a>,</td></tr>
    <tr><td><a href="/book/pt-pt">Português (Portugal)</a>,</td></tr>
    <tr><td><a href="/book/sv">Svenska</a>,</td></tr>
    <tr><td><a href="/book/tr">Türkçe</a>.</td></tr>
  </table>
</p>
<hr class="sidebar"/>
<p>
The source of this book is <a href="https://github.com/progit/progit2">hosted on GitHub.</a></br>
Patches, suggestions and comments are welcome.
</p>


  </nav>
</aside>

        <div id="content">
          

<div id='book-chapters'>
  <a class="dropdown-trigger" id="book-chapters-trigger" data-panel-id="chapters-dropdown" href="#">Chapters ▾</a>
<div class='dropdown-panel' id='chapters-dropdown'>
  <div class="three-column">
    <div class='column-left'>
      <ol class='book-toc'>
  <li class='chapter'>
  <h2>1. <a href="/book/en/v2/Getting-Started-About-Version-Control">Getting Started</a></h2>
    <ol>
          <li>
            1.1
            <a href="/book/en/v2/Getting-Started-About-Version-Control" >About Version Control</a>
          </li>
          <li>
            1.2
            <a href="/book/en/v2/Getting-Started-A-Short-History-of-Git" >A Short History of Git</a>
          </li>
          <li>
            1.3
            <a href="/book/en/v2/Getting-Started-What-is-Git%3F" >What is Git?</a>
          </li>
          <li>
            1.4
            <a href="/book/en/v2/Getting-Started-The-Command-Line" >The Command Line</a>
          </li>
          <li>
            1.5
            <a href="/book/en/v2/Getting-Started-Installing-Git" >Installing Git</a>
          </li>
          <li>
            1.6
            <a href="/book/en/v2/Getting-Started-First-Time-Git-Setup" >First-Time Git Setup</a>
          </li>
          <li>
            1.7
            <a href="/book/en/v2/Getting-Started-Getting-Help" >Getting Help</a>
          </li>
          <li>
            1.8
            <a href="/book/en/v2/Getting-Started-Summary" >Summary</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>2. <a href="/book/en/v2/Git-Basics-Getting-a-Git-Repository">Git Basics</a></h2>
    <ol>
          <li>
            2.1
            <a href="/book/en/v2/Git-Basics-Getting-a-Git-Repository" >Getting a Git Repository</a>
          </li>
          <li>
            2.2
            <a href="/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository" >Recording Changes to the Repository</a>
          </li>
          <li>
            2.3
            <a href="/book/en/v2/Git-Basics-Viewing-the-Commit-History" >Viewing the Commit History</a>
          </li>
          <li>
            2.4
            <a href="/book/en/v2/Git-Basics-Undoing-Things" >Undoing Things</a>
          </li>
          <li>
            2.5
            <a href="/book/en/v2/Git-Basics-Working-with-Remotes" >Working with Remotes</a>
          </li>
          <li>
            2.6
            <a href="/book/en/v2/Git-Basics-Tagging" >Tagging</a>
          </li>
          <li>
            2.7
            <a href="/book/en/v2/Git-Basics-Git-Aliases" >Git Aliases</a>
          </li>
          <li>
            2.8
            <a href="/book/en/v2/Git-Basics-Summary" >Summary</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>3. <a href="/book/en/v2/Git-Branching-Branches-in-a-Nutshell">Git Branching</a></h2>
    <ol>
          <li>
            3.1
            <a href="/book/en/v2/Git-Branching-Branches-in-a-Nutshell" >Branches in a Nutshell</a>
          </li>
          <li>
            3.2
            <a href="/book/en/v2/Git-Branching-Basic-Branching-and-Merging" >Basic Branching and Merging</a>
          </li>
          <li>
            3.3
            <a href="/book/en/v2/Git-Branching-Branch-Management" >Branch Management</a>
          </li>
          <li>
            3.4
            <a href="/book/en/v2/Git-Branching-Branching-Workflows" >Branching Workflows</a>
          </li>
          <li>
            3.5
            <a href="/book/en/v2/Git-Branching-Remote-Branches" >Remote Branches</a>
          </li>
          <li>
            3.6
            <a href="/book/en/v2/Git-Branching-Rebasing" >Rebasing</a>
          </li>
          <li>
            3.7
            <a href="/book/en/v2/Git-Branching-Summary" >Summary</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>4. <a href="/book/en/v2/Git-on-the-Server-The-Protocols">Git on the Server</a></h2>
    <ol>
          <li>
            4.1
            <a href="/book/en/v2/Git-on-the-Server-The-Protocols" >The Protocols</a>
          </li>
          <li>
            4.2
            <a href="/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server" >Getting Git on a Server</a>
          </li>
          <li>
            4.3
            <a href="/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key" >Generating Your SSH Public Key</a>
          </li>
          <li>
            4.4
            <a href="/book/en/v2/Git-on-the-Server-Setting-Up-the-Server" >Setting Up the Server</a>
          </li>
          <li>
            4.5
            <a href="/book/en/v2/Git-on-the-Server-Git-Daemon" >Git Daemon</a>
          </li>
          <li>
            4.6
            <a href="/book/en/v2/Git-on-the-Server-Smart-HTTP" >Smart HTTP</a>
          </li>
          <li>
            4.7
            <a href="/book/en/v2/Git-on-the-Server-GitWeb" >GitWeb</a>
          </li>
          <li>
            4.8
            <a href="/book/en/v2/Git-on-the-Server-GitLab" >GitLab</a>
          </li>
          <li>
            4.9
            <a href="/book/en/v2/Git-on-the-Server-Third-Party-Hosted-Options" >Third Party Hosted Options</a>
          </li>
          <li>
            4.10
            <a href="/book/en/v2/Git-on-the-Server-Summary" >Summary</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>5. <a href="/book/en/v2/Distributed-Git-Distributed-Workflows">Distributed Git</a></h2>
    <ol>
          <li>
            5.1
            <a href="/book/en/v2/Distributed-Git-Distributed-Workflows" >Distributed Workflows</a>
          </li>
          <li>
            5.2
            <a href="/book/en/v2/Distributed-Git-Contributing-to-a-Project" >Contributing to a Project</a>
          </li>
          <li>
            5.3
            <a href="/book/en/v2/Distributed-Git-Maintaining-a-Project" >Maintaining a Project</a>
          </li>
          <li>
            5.4
            <a href="/book/en/v2/Distributed-Git-Summary" >Summary</a>
          </li>
    </ol>
  </li>
</ol>

    </div>
    <div class='column-middle'>
      <ol class='book-toc'>
  <li class='chapter'>
  <h2>6. <a href="/book/en/v2/GitHub-Account-Setup-and-Configuration">GitHub</a></h2>
    <ol>
          <li>
            6.1
            <a href="/book/en/v2/GitHub-Account-Setup-and-Configuration" >Account Setup and Configuration</a>
          </li>
          <li>
            6.2
            <a href="/book/en/v2/GitHub-Contributing-to-a-Project" >Contributing to a Project</a>
          </li>
          <li>
            6.3
            <a href="/book/en/v2/GitHub-Maintaining-a-Project" >Maintaining a Project</a>
          </li>
          <li>
            6.4
            <a href="/book/en/v2/GitHub-Managing-an-organization" >Managing an organization</a>
          </li>
          <li>
            6.5
            <a href="/book/en/v2/GitHub-Scripting-GitHub" >Scripting GitHub</a>
          </li>
          <li>
            6.6
            <a href="/book/en/v2/GitHub-Summary" >Summary</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>7. <a href="/book/en/v2/Git-Tools-Revision-Selection">Git Tools</a></h2>
    <ol>
          <li>
            7.1
            <a href="/book/en/v2/Git-Tools-Revision-Selection" >Revision Selection</a>
          </li>
          <li>
            7.2
            <a href="/book/en/v2/Git-Tools-Interactive-Staging" >Interactive Staging</a>
          </li>
          <li>
            7.3
            <a href="/book/en/v2/Git-Tools-Stashing-and-Cleaning" >Stashing and Cleaning</a>
          </li>
          <li>
            7.4
            <a href="/book/en/v2/Git-Tools-Signing-Your-Work" >Signing Your Work</a>
          </li>
          <li>
            7.5
            <a href="/book/en/v2/Git-Tools-Searching" >Searching</a>
          </li>
          <li>
            7.6
            <a href="/book/en/v2/Git-Tools-Rewriting-History" >Rewriting History</a>
          </li>
          <li>
            7.7
            <a href="/book/en/v2/Git-Tools-Reset-Demystified" >Reset Demystified</a>
          </li>
          <li>
            7.8
            <a href="/book/en/v2/Git-Tools-Advanced-Merging" >Advanced Merging</a>
          </li>
          <li>
            7.9
            <a href="/book/en/v2/Git-Tools-Rerere" >Rerere</a>
          </li>
          <li>
            7.10
            <a href="/book/en/v2/Git-Tools-Debugging-with-Git" >Debugging with Git</a>
          </li>
          <li>
            7.11
            <a href="/book/en/v2/Git-Tools-Submodules" >Submodules</a>
          </li>
          <li>
            7.12
            <a href="/book/en/v2/Git-Tools-Bundling" >Bundling</a>
          </li>
          <li>
            7.13
            <a href="/book/en/v2/Git-Tools-Replace" >Replace</a>
          </li>
          <li>
            7.14
            <a href="/book/en/v2/Git-Tools-Credential-Storage" >Credential Storage</a>
          </li>
          <li>
            7.15
            <a href="/book/en/v2/Git-Tools-Summary" >Summary</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>8. <a href="/book/en/v2/Customizing-Git-Git-Configuration">Customizing Git</a></h2>
    <ol>
          <li>
            8.1
            <a href="/book/en/v2/Customizing-Git-Git-Configuration" >Git Configuration</a>
          </li>
          <li>
            8.2
            <a href="/book/en/v2/Customizing-Git-Git-Attributes" >Git Attributes</a>
          </li>
          <li>
            8.3
            <a href="/book/en/v2/Customizing-Git-Git-Hooks" >Git Hooks</a>
          </li>
          <li>
            8.4
            <a href="/book/en/v2/Customizing-Git-An-Example-Git-Enforced-Policy" >An Example Git-Enforced Policy</a>
          </li>
          <li>
            8.5
            <a href="/book/en/v2/Customizing-Git-Summary" >Summary</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>9. <a href="/book/en/v2/Git-and-Other-Systems-Git-as-a-Client">Git and Other Systems</a></h2>
    <ol>
          <li>
            9.1
            <a href="/book/en/v2/Git-and-Other-Systems-Git-as-a-Client" >Git as a Client</a>
          </li>
          <li>
            9.2
            <a href="/book/en/v2/Git-and-Other-Systems-Migrating-to-Git" >Migrating to Git</a>
          </li>
          <li>
            9.3
            <a href="/book/en/v2/Git-and-Other-Systems-Summary" >Summary</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>10. <a href="/book/en/v2/Git-Internals-Plumbing-and-Porcelain">Git Internals</a></h2>
    <ol>
          <li>
            10.1
            <a href="/book/en/v2/Git-Internals-Plumbing-and-Porcelain" >Plumbing and Porcelain</a>
          </li>
          <li>
            10.2
            <a href="/book/en/v2/Git-Internals-Git-Objects" >Git Objects</a>
          </li>
          <li>
            10.3
            <a href="/book/en/v2/Git-Internals-Git-References" >Git References</a>
          </li>
          <li>
            10.4
            <a href="/book/en/v2/Git-Internals-Packfiles" >Packfiles</a>
          </li>
          <li>
            10.5
            <a href="/book/en/v2/Git-Internals-The-Refspec" >The Refspec</a>
          </li>
          <li>
            10.6
            <a href="/book/en/v2/Git-Internals-Transfer-Protocols" >Transfer Protocols</a>
          </li>
          <li>
            10.7
            <a href="/book/en/v2/Git-Internals-Maintenance-and-Data-Recovery" class=active>Maintenance and Data Recovery</a>
          </li>
          <li>
            10.8
            <a href="/book/en/v2/Git-Internals-Environment-Variables" >Environment Variables</a>
          </li>
          <li>
            10.9
            <a href="/book/en/v2/Git-Internals-Summary" >Summary</a>
          </li>
    </ol>
  </li>
</ol>

    </div>
    <div class='column-right'>
      <ol class='book-toc'>
  <li class='chapter'>
  <h2>A1. <a href="/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Graphical-Interfaces">Appendix A: Git in Other Environments</a></h2>
    <ol>
          <li>
            A1.1
            <a href="/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Graphical-Interfaces" >Graphical Interfaces</a>
          </li>
          <li>
            A1.2
            <a href="/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Visual-Studio" >Git in Visual Studio</a>
          </li>
          <li>
            A1.3
            <a href="/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Visual-Studio-Code" >Git in Visual Studio Code</a>
          </li>
          <li>
            A1.4
            <a href="/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Eclipse" >Git in Eclipse</a>
          </li>
          <li>
            A1.5
            <a href="/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-IntelliJ-%2F-PyCharm-%2F-WebStorm-%2F-PhpStorm-%2F-RubyMine" >Git in IntelliJ / PyCharm / WebStorm / PhpStorm / RubyMine</a>
          </li>
          <li>
            A1.6
            <a href="/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Sublime-Text" >Git in Sublime Text</a>
          </li>
          <li>
            A1.7
            <a href="/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Bash" >Git in Bash</a>
          </li>
          <li>
            A1.8
            <a href="/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Zsh" >Git in Zsh</a>
          </li>
          <li>
            A1.9
            <a href="/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-PowerShell" >Git in PowerShell</a>
          </li>
          <li>
            A1.10
            <a href="/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Summary" >Summary</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>A2. <a href="/book/en/v2/Appendix-B%3A-Embedding-Git-in-your-Applications-Command-line-Git">Appendix B: Embedding Git in your Applications</a></h2>
    <ol>
          <li>
            A2.1
            <a href="/book/en/v2/Appendix-B%3A-Embedding-Git-in-your-Applications-Command-line-Git" >Command-line Git</a>
          </li>
          <li>
            A2.2
            <a href="/book/en/v2/Appendix-B%3A-Embedding-Git-in-your-Applications-Libgit2" >Libgit2</a>
          </li>
          <li>
            A2.3
            <a href="/book/en/v2/Appendix-B%3A-Embedding-Git-in-your-Applications-JGit" >JGit</a>
          </li>
          <li>
            A2.4
            <a href="/book/en/v2/Appendix-B%3A-Embedding-Git-in-your-Applications-go-git" >go-git</a>
          </li>
          <li>
            A2.5
            <a href="/book/en/v2/Appendix-B%3A-Embedding-Git-in-your-Applications-Dulwich" >Dulwich</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>A3. <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config">Appendix C: Git Commands</a></h2>
    <ol>
          <li>
            A3.1
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config" >Setup and Config</a>
          </li>
          <li>
            A3.2
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Getting-and-Creating-Projects" >Getting and Creating Projects</a>
          </li>
          <li>
            A3.3
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Basic-Snapshotting" >Basic Snapshotting</a>
          </li>
          <li>
            A3.4
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Branching-and-Merging" >Branching and Merging</a>
          </li>
          <li>
            A3.5
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Sharing-and-Updating-Projects" >Sharing and Updating Projects</a>
          </li>
          <li>
            A3.6
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Inspection-and-Comparison" >Inspection and Comparison</a>
          </li>
          <li>
            A3.7
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Debugging" >Debugging</a>
          </li>
          <li>
            A3.8
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Patching" >Patching</a>
          </li>
          <li>
            A3.9
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Email" >Email</a>
          </li>
          <li>
            A3.10
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-External-Systems" >External Systems</a>
          </li>
          <li>
            A3.11
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Administration" >Administration</a>
          </li>
          <li>
            A3.12
            <a href="/book/en/v2/Appendix-C%3A-Git-Commands-Plumbing-Commands" >Plumbing Commands</a>
          </li>
    </ol>
  </li>
</ol>

    </div>
  </div>
 </div>

    <span class="light" id="edition">
      2nd Edition
    </span>
</div>

<div id='main' class="book edition2">
    <h1>10.7 Git Internals - Maintenance and Data Recovery</h1>
  <div>
<h2 id="_maintenance_and_data_recovery">Maintenance and Data Recovery</h2>
<div class="paragraph">
<p>Occasionally, you may have to do some cleanup – make a repository more compact, clean up an imported repository, or recover lost work.
This section will cover some of these scenarios.</p>
</div>
<div class="sect3">
<h3 id="_git_gc">Maintenance</h3>
<div class="paragraph">
<p>Occasionally, Git automatically runs a command called “auto gc”.
Most of the time, this command does nothing.
However, if there are too many loose objects (objects not in a packfile) or too many packfiles, Git launches a full-fledged <code>git gc</code> command.
The “gc” stands for garbage collect, and the command does a number of things: it gathers up all the loose objects and places them in packfiles, it consolidates packfiles into one big packfile, and it removes objects that aren’t reachable from any commit and are a few months old.</p>
</div>
<div class="paragraph">
<p>You can run auto gc manually as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git gc --auto</code></pre>
</div>
</div>
<div class="paragraph">
<p>Again, this generally does nothing.
You must have around 7,000 loose objects or more than 50 packfiles for Git to fire up a real gc command.
You can modify these limits with the <code>gc.auto</code> and <code>gc.autopacklimit</code> config settings, respectively.</p>
</div>
<div class="paragraph">
<p>The other thing <code>gc</code> will do is pack up your references into a single file.
Suppose your repository contains the following branches and tags:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ find .git/refs -type f
.git/refs/heads/experiment
.git/refs/heads/master
.git/refs/tags/v1.0
.git/refs/tags/v1.1</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you run <code>git gc</code>, you’ll no longer have these files in the <code>refs</code> directory.
Git will move them for the sake of efficiency into a file named <code>.git/packed-refs</code> that looks like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ cat .git/packed-refs
# pack-refs with: peeled fully-peeled
cac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment
ab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master
cac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0
9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1
^1a410efbd13591db07496601ebc7a059dd55cfe9</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you update a reference, Git doesn’t edit this file but instead writes a new file to <code>refs/heads</code>.
To get the appropriate SHA-1 for a given reference, Git checks for that reference in the <code>refs</code> directory and then checks the <code>packed-refs</code> file as a fallback.
However, if you can’t find a reference in the <code>refs</code> directory, it’s probably in your <code>packed-refs</code> file.</p>
</div>
<div class="paragraph">
<p>Notice the last line of the file, which begins with a <code>^</code>.
This means the tag directly above is an annotated tag and that line is the commit that the annotated tag points to.</p>
</div>
</div>
<div class="sect3">
<h3 id="_data_recovery">Data Recovery</h3>
<div class="paragraph">
<p>At some point in your Git journey, you may accidentally lose a commit.
Generally, this happens because you force-delete a branch that had work on it, and it turns out you wanted the branch after all; or you hard-reset a branch, thus abandoning commits that you wanted something from.
Assuming this happens, how can you get your commits back?</p>
</div>
<div class="paragraph">
<p>Here’s an example that hard-resets the <code>master</code> branch in your test repository to an older commit and then recovers the lost commits.
First, let’s review where your repository is at this point:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git log --pretty=oneline
ab1afef80fac8e34258ff41fc1b867c702daa24b Modify repo a bit
484a59275031909e19aadb7c92262719cfcdf19a Create repo.rb
1a410efbd13591db07496601ebc7a059dd55cfe9 Third commit
cac0cab538b970a37ea1e769cbbde608743bc96d Second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d First commit</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now, move the <code>master</code> branch back to the middle commit:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9
HEAD is now at 1a410ef Third commit
$ git log --pretty=oneline
1a410efbd13591db07496601ebc7a059dd55cfe9 Third commit
cac0cab538b970a37ea1e769cbbde608743bc96d Second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d First commit</code></pre>
</div>
</div>
<div class="paragraph">
<p>You’ve effectively lost the top two commits – you have no branch from which those commits are reachable.
You need to find the latest commit SHA-1 and then add a branch that points to it.
The trick is finding that latest commit SHA-1 – it’s not like you’ve memorized it, right?</p>
</div>
<div class="paragraph">
<p>Often, the quickest way is to use a tool called <code>git reflog</code>.
As you’re working, Git silently records what your HEAD is every time you change it.
Each time you commit or change branches, the reflog is updated.
The reflog is also updated by the <code>git update-ref</code> command, which is another reason to use it instead of just writing the SHA-1 value to your ref files, as we covered in <a href="ch00/_git_refs">Git References</a>.
You can see where you’ve been at any time by running <code>git reflog</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git reflog
1a410ef HEAD@{0}: reset: moving to 1a410ef
ab1afef HEAD@{1}: commit: Modify repo.rb a bit
484a592 HEAD@{2}: commit: Create repo.rb</code></pre>
</div>
</div>
<div class="paragraph">
<p>Here we can see the two commits that we have had checked out, however there is not much information here.
To see the same information in a much more useful way, we can run <code>git log -g</code>, which will give you a normal log output for your reflog.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git log -g
commit 1a410efbd13591db07496601ebc7a059dd55cfe9
Reflog: HEAD@{0} (Scott Chacon &lt;schacon@gmail.com&gt;)
Reflog message: updating HEAD
Author: Scott Chacon &lt;schacon@gmail.com&gt;
Date:   Fri May 22 18:22:37 2009 -0700

		Third commit

commit ab1afef80fac8e34258ff41fc1b867c702daa24b
Reflog: HEAD@{1} (Scott Chacon &lt;schacon@gmail.com&gt;)
Reflog message: updating HEAD
Author: Scott Chacon &lt;schacon@gmail.com&gt;
Date:   Fri May 22 18:15:24 2009 -0700

       Modify repo.rb a bit</code></pre>
</div>
</div>
<div class="paragraph">
<p>It looks like the bottom commit is the one you lost, so you can recover it by creating a new branch at that commit.
For example, you can start a branch named <code>recover-branch</code> at that commit (ab1afef):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git branch recover-branch ab1afef
$ git log --pretty=oneline recover-branch
ab1afef80fac8e34258ff41fc1b867c702daa24b Modify repo.rb a bit
484a59275031909e19aadb7c92262719cfcdf19a Create repo.rb
1a410efbd13591db07496601ebc7a059dd55cfe9 Third commit
cac0cab538b970a37ea1e769cbbde608743bc96d Second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d First commit</code></pre>
</div>
</div>
<div class="paragraph">
<p>Cool – now you have a branch named <code>recover-branch</code> that is where your <code>master</code> branch used to be, making the first two commits reachable again.
Next, suppose your loss was for some reason not in the reflog – you can simulate that by removing <code>recover-branch</code> and deleting the reflog.
Now the first two commits aren’t reachable by anything:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git branch -D recover-branch
$ rm -Rf .git/logs/</code></pre>
</div>
</div>
<div class="paragraph">
<p>Because the reflog data is kept in the <code>.git/logs/</code> directory, you effectively have no reflog.
How can you recover that commit at this point?
One way is to use the <code>git fsck</code> utility, which checks your database for integrity.
If you run it with the <code>--full</code> option, it shows you all objects that aren’t pointed to by another object:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git fsck --full
Checking object directories: 100% (256/256), done.
Checking objects: 100% (18/18), done.
dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4
dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b
dangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9
dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293</code></pre>
</div>
</div>
<div class="paragraph">
<p>In this case, you can see your missing commit after the string “dangling commit”.
You can recover it the same way, by adding a branch that points to that SHA-1.</p>
</div>
</div>
<div class="sect3">
<h3 id="_removing_objects">Removing Objects</h3>
<div class="paragraph">
<p>There are a lot of great things about Git, but one feature that can cause issues is the fact that a <code>git clone</code> downloads the entire history of the project, including every version of every file.
This is fine if the whole thing is source code, because Git is highly optimized to compress that data efficiently.
However, if someone at any point in the history of your project added a single huge file, every clone for all time will be forced to download that large file, even if it was removed from the project in the very next commit.
Because it’s reachable from the history, it will always be there.</p>
</div>
<div class="paragraph">
<p>This can be a huge problem when you’re converting Subversion or Perforce repositories into Git.
Because you don’t download the whole history in those systems, this type of addition carries few consequences.
If you did an import from another system or otherwise find that your repository is much larger than it should be, here is how you can find and remove large objects.</p>
</div>
<div class="paragraph">
<p><strong>Be warned: this technique is destructive to your commit history.</strong>
It rewrites every commit object since the earliest tree you have to modify to remove a large file reference.
If you do this immediately after an import, before anyone has started to base work on the commit, you’re fine – otherwise, you have to notify all contributors that they must rebase their work onto your new commits.</p>
</div>
<div class="paragraph">
<p>To demonstrate, you’ll add a large file into your test repository, remove it in the next commit, find it, and remove it permanently from the repository.
First, add a large object to your history:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ curl https://www.kernel.org/pub/software/scm/git/git-2.1.0.tar.gz &gt; git.tgz
$ git add git.tgz
$ git commit -m 'Add git tarball'
[master 7b30847] Add git tarball
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 git.tgz</code></pre>
</div>
</div>
<div class="paragraph">
<p>Oops – you didn’t want to add a huge tarball to your project.
Better get rid of it:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git rm git.tgz
rm 'git.tgz'
$ git commit -m 'Oops - remove large tarball'
[master dadf725] Oops - remove large tarball
 1 file changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 git.tgz</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now, <code>gc</code> your database and see how much space you’re using:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git gc
Counting objects: 17, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (13/13), done.
Writing objects: 100% (17/17), done.
Total 17 (delta 1), reused 10 (delta 0)</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can run the <code>count-objects</code> command to quickly see how much space you’re using:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git count-objects -v
count: 7
size: 32
in-pack: 17
packs: 1
size-pack: 4868
prune-packable: 0
garbage: 0
size-garbage: 0</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>size-pack</code> entry is the size of your packfiles in kilobytes, so you’re using almost 5MB.
Before the last commit, you were using closer to 2K – clearly, removing the file from the previous commit didn’t remove it from your history.
Every time anyone clones this repository, they will have to clone all 5MB just to get this tiny project, because you accidentally added a big file.
Let’s get rid of it.</p>
</div>
<div class="paragraph">
<p>First you have to find it.
In this case, you already know what file it is.
But suppose you didn’t; how would you identify what file or files were taking up so much space?
If you run <code>git gc</code>, all the objects are in a packfile; you can identify the big objects by running another plumbing command called <code>git verify-pack</code> and sorting on the third field in the output, which is file size.
You can also pipe it through the <code>tail</code> command because you’re only interested in the last few largest files:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git verify-pack -v .git/objects/pack/pack-29…69.idx \
  | sort -k 3 -n \
  | tail -3
dadf7258d699da2c8d89b09ef6670edb7d5f91b4 commit 229 159 12
033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob   22044 5792 4977696
82c99a3e86bb1267b236a4b6eff7868d97489af1 blob   4975916 4976258 1438</code></pre>
</div>
</div>
<div class="paragraph">
<p>The big object is at the bottom: 5MB.
To find out what file it is, you’ll use the <code>rev-list</code> command, which you used briefly in <a href="ch00/_enforcing_commit_message_format">Enforcing a Specific Commit-Message Format</a>.
If you pass <code>--objects</code> to <code>rev-list</code>, it lists all the commit SHA-1s and also the blob SHA-1s with the file paths associated with them.
You can use this to find your blob’s name:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git rev-list --objects --all | grep 82c99a3
82c99a3e86bb1267b236a4b6eff7868d97489af1 git.tgz</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now, you need to remove this file from all trees in your past.
You can easily see what commits modified this file:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git log --oneline --branches -- git.tgz
dadf725 Oops - remove large tarball
7b30847 Add git tarball</code></pre>
</div>
</div>
<div class="paragraph">
<p>You must rewrite all the commits downstream from <code>7b30847</code> to fully remove this file from your Git history.
To do so, you use <code>filter-branch</code>, which you used in <a href="ch00/_rewriting_history">Rewriting History</a>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git filter-branch --index-filter \
  'git rm --ignore-unmatch --cached git.tgz' -- 7b30847^..
Rewrite 7b30847d080183a1ab7d18fb202473b3096e9f34 (1/2)rm 'git.tgz'
Rewrite dadf7258d699da2c8d89b09ef6670edb7d5f91b4 (2/2)
Ref 'refs/heads/master' was rewritten</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>--index-filter</code> option is similar to the <code>--tree-filter</code> option used in <a href="ch00/_rewriting_history">Rewriting History</a>, except that instead of passing a command that modifies files checked out on disk, you’re modifying your staging area or index each time.</p>
</div>
<div class="paragraph">
<p>Rather than remove a specific file with something like <code>rm file</code>, you have to remove it with <code>git rm --cached</code> – you must remove it from the index, not from disk.
The reason to do it this way is speed – because Git doesn’t have to check out each revision to disk before running your filter, the process can be much, much faster.
You can accomplish the same task with <code>--tree-filter</code> if you want.
The <code>--ignore-unmatch</code> option to <code>git rm</code> tells it not to error out if the pattern you’re trying to remove isn’t there.
Finally, you ask <code>filter-branch</code> to rewrite your history only from the <code>7b30847</code> commit up, because you know that is where this problem started.
Otherwise, it will start from the beginning and will unnecessarily take longer.</p>
</div>
<div class="paragraph">
<p>Your history no longer contains a reference to that file.
However, your reflog and a new set of refs that Git added when you did the <code>filter-branch</code> under <code>.git/refs/original</code> still do, so you have to remove them and then repack the database.
You need to get rid of anything that has a pointer to those old commits before you repack:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ rm -Rf .git/refs/original
$ rm -Rf .git/logs/
$ git gc
Counting objects: 15, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (15/15), done.
Total 15 (delta 1), reused 12 (delta 0)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Let’s see how much space you saved.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git count-objects -v
count: 11
size: 4904
in-pack: 15
packs: 1
size-pack: 8
prune-packable: 0
garbage: 0
size-garbage: 0</code></pre>
</div>
</div>
<div class="paragraph">
<p>The packed repository size is down to 8K, which is much better than 5MB.
You can see from the size value that the big object is still in your loose objects, so it’s not gone; but it won’t be transferred on a push or subsequent clone, which is what is important.
If you really wanted to, you could remove the object completely by running <code>git prune</code> with the <code>--expire</code> option:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ git prune --expire now
$ git count-objects -v
count: 0
size: 0
in-pack: 15
packs: 1
size-pack: 8
prune-packable: 0
garbage: 0
size-garbage: 0</code></pre>
</div>
</div>
</div>
<div id="nav"><a href="/book/en/v2/Git-Internals-Transfer-Protocols">prev</a> | <a href="/book/en/v2/Git-Internals-Environment-Variables">next</a></div></div>
</div>

        </div>
      </div>
      <footer>
  <div class="site-source">
    <a href="/site">About this site</a><br>
    Patches, suggestions, and comments are welcome.
  </div>
  <div class="sfc-member">
    Git is a member of <a href="/sfc">Software Freedom Conservancy</a>
  </div>
</footer>

<script src="/assets/application-84db8b4799905f9f7cc62292e1a97e206056e492088736595af9c2fe3ee50c4b.js"></script>

    </div>

</body>
</html>
